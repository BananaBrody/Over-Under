{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n/*vex-vision-config:begin*/\nvision Vision7 = vision (PORT7, 50);\n/*vex-vision-config:end*/\nmotor leftMotorA = motor(PORT5, ratio18_1, false);\nmotor leftMotorB = motor(PORT15, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT6, ratio18_1, true);\nmotor rightMotorB = motor(PORT16, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\nevent CheckTriball = event();\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid FollowTriball() {\n  int BiggestObject = 0;\n  int BlueGreatestHight = 0;\n  int BlueGreatestWidth = 0;\n  int BlueBiggestObject = 0;\n  int GreenGreatestHight = 0;\n  int GreenGreatestWidth = 0;\n  int GreenBiggestObject = 0;\n  int RedGreatestHight = 0;\n  int RedGreatestWidth = 0;\n  int RedBiggestObject = 0;\n  char ClosestColor = NULL;\n  if (Vision7.objectCount > 1) {\n    Vision7.takeSnapshot(Vision7__BLUEBALL);\n    for (int i = 0; i < Vision7.objectCount; i++){\n      if (Vision7.objects[i].height + Vision7.objects[i].width > BlueGreatestHight + BlueGreatestWidth){\n        BlueGreatestWidth = Vision7.objects[i].width;\n        BlueGreatestHight = Vision7.objects[i].height;\n        BlueBiggestObject = i;\n      }\n    }\n    Vision7.takeSnapshot(Vision7__GREENBALL);\n    for (int i = 0; i < Vision7.objectCount; i++){\n      if (Vision7.objects[i].height + Vision7.objects[i].width > GreenGreatestHight + GreenGreatestWidth){\n        GreenGreatestWidth = Vision7.objects[i].width;\n        GreenGreatestHight = Vision7.objects[i].height;\n        GreenBiggestObject = i;\n      }\n    }\n    Vision7.takeSnapshot(Vision7__REDBALL);\n    for (int i = 0; i < Vision7.objectCount; i++){\n      if (Vision7.objects[i].height + Vision7.objects[i].width > RedGreatestHight + RedGreatestWidth){\n        RedGreatestWidth = Vision7.objects[i].width;\n        RedGreatestHight = Vision7.objects[i].height;\n        RedBiggestObject = i;\n      }\n    }\n    if (GreenGreatestWidth + GreenGreatestHight > BlueGreatestWidth + BlueGreatestHight) {\n      if (GreenGreatestWidth + GreenGreatestHight > RedGreatestWidth + RedGreatestHight) {\n        BiggestObject = GreenBiggestObject;\n        ClosestColor = 'G';\n      }\n      else {\n        BiggestObject = RedBiggestObject;\n        ClosestColor = 'R';\n      }\n    } \n      else {\n        if (BlueGreatestWidth + BlueGreatestHight > RedGreatestWidth + RedGreatestHight) {\n          BiggestObject = BlueBiggestObject;\n          ClosestColor = 'B';\n\n        }\n        else {\n          BiggestObject = RedBiggestObject;\n          ClosestColor = 'R';\n        }\n      }\n      if (ClosestColor == 'G') {\n        Vision7.takeSnapshot(Vision7__GREENBALL);\n      }\n      else if (ClosestColor == 'B') {\n        Vision7.takeSnapshot(Vision7__BLUEBALL);\n      }\n      else {\n        Vision7.takeSnapshot(Vision7__REDBALL);\n      }\n      if (Vision7.objects[BiggestObject].centerX > 150 & Vision7.objects[0].centerX < 165){\n      Drivetrain.drive(forward);\n      Intake.spin(forward);\n      Drivetrain.stop();\n      } \n      else if (Vision7.objects[BiggestObject].centerX > 164) {\n      Drivetrain.turn(right);\n      Intake.stop();\n      }\n      else if (Vision7.objects[BiggestObject].centerX < 151) {\n      Drivetrain.turn(left);\n      Intake.stop();\n      } \n      else if (Vision7.objectCount == 0) {\n        Drivetrain.stop();\n        Intake.stop();\n      }\n    }\n    else{\n    Vision7.takeSnapshot(Vision7__BLUEBALL);\n    if (Vision7.objects[0].centerX > 150 & Vision7.objects[0].centerX < 165){\n      Drivetrain.drive(forward);\n      Intake.spin(forward);\n      Drivetrain.stop();\n    } \n    else if (Vision7.objects[0].centerX > 164) {\n      Drivetrain.turn(right);\n      Intake.stop();\n    }\n    else if (Vision7.objects[0].centerX < 151) {\n    Drivetrain.turn(left);\n    Intake.stop();\n    } \n    else if (Vision7.objectCount == 0) {\n      Drivetrain.stop();\n      Intake.stop();\n    }\n  }\n}\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n  \n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n  CheckTriball(FollowTriball);\n\n  wait(30, msec);\n\n  while (true) {\n    CheckTriball.broadcastAndWait();\n    wait(0.1, seconds);\n  }\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  while (true) {\n    wait(20, msec);\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n  autonomous();\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[7],"name":"Vision7","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBALL\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"BLUEBALL\"},\"range\":2.5},{\"name\":\"GREENBALL\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"GREENBALL\"},\"range\":2.5},{\"name\":\"REDBALL\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"REDBALL\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[5,15,6,16,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}