{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT1, ratio18_1, true);\nmotor leftMotorB = motor(PORT10, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT11, ratio18_1, false);\nmotor rightMotorB = motor(PORT20, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT2);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor FlywheelMotorA = motor(PORT5, ratio6_1, false);\nmotor FlywheelMotorB = motor(PORT6, ratio6_1, false);\nmotor_group Flywheel = motor_group(FlywheelMotorA, FlywheelMotorB);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Initializes snapShot array\nint snapShots[75][3];\n\n// Declares variables\nfloat snapShot;\nint flywheelState;\nint flywheelTemp;\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\nbool MimickControlCodeEnabled = false;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control Flywheel\n      if (Controller1.ButtonR1.pressing()) {\n        Flywheel.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Flywheel.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Flywheel.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n\n    // - - - - - MIMICK CODE - - - - -\n    if(MimickControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the snapShot arrays\n      // left = 0\n      // right = 1\n      int drivetrainLeftSideSpeed = snapShots[static_cast<int>(snapShot)][0];\n      int drivetrainRightSideSpeed = snapShots[static_cast<int>(snapShot)][1];\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control Flywheel\n      if (Controller1.ButtonR1.pressing()) {\n        Flywheel.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Flywheel.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Flywheel.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       drivetracking.cpp                                         */\n/*    Author:       Brody                                                     */\n/*    Created:      11.08.23                                                  */\n/*    Description:  Drivetracking                                             */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  while (true) {\n    Brain.Screen.print(\"Awaiting initialization...\");\n    while (!Controller1.ButtonA.pressing()) {\n      wait(10,msec);\n    }\n    RemoteControlCodeEnabled = false;\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Drivetracking will begin in 3\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Drivetracking will begin in 2\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Drivetracking will begin in 1\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    RemoteControlCodeEnabled = true;\n    Brain.Screen.print(\"Begin!\");\n    Brain.Timer.clear();\n    Brain.Screen.newLine();\n    while (Brain.Timer.time(seconds) != 15) {\n      Brain.Screen.clearLine(2);\n      Brain.Screen.print(\"Drivetracking will end in %f\", fabs(Brain.Timer.time(seconds) - 15));\n      snapShot = Brain.Timer.time(seconds) * 10;\n      snapShots[static_cast<int>(snapShot)][0] = { Controller1.Axis3.position() };\n      snapShots[static_cast<int>(snapShot)][1] = { Controller1.Axis2.position() };\n      if (Controller1.ButtonR1.pressing()) {\n        flywheelState = 1;\n      } else {\n        flywheelState = 0;\n      }\n      snapShots[static_cast<int>(snapShot)][2] = { flywheelState };\n      wait(200,msec);\n    }\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"Drivetracking successful! Processing data...\");\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Mimicking will begin in 3\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Mimicking will begin in 2\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Mimicking will begin in 1\");\n    wait(1,seconds);\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Mimicking has begun! Mimicking...\");\n    Brain.Timer.clear();\n    RemoteControlCodeEnabled = false;\n    MimickControlCodeEnabled = true;\n    while (Brain.Timer.time(seconds) != 15) {\n      snapShot = Brain.Timer.time(seconds) * 10;\n    }\n    MimickControlCodeEnabled = false;\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Mimicking successful! To record a new drive, press A.\");\n    Brain.Screen.newLine();\n    Brain.Screen.newLine();\n    Brain.Screen.print(\" - Analytics - \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Battery: %f\", Brain.Battery.capacity());\n    Brain.Screen.newLine();\n    flywheelTemp = (FlywheelMotorA.temperature(percent) + FlywheelMotorB.temperature(percent)) / 2;\n    Brain.Screen.print(\"Flywheel Temperature: %f\", flywheelTemp);\n    RemoteControlCodeEnabled = true;\n    while (!Controller1.ButtonA.pressing()) {\n      wait (20,msec);\n    }\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1,10,11,20,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"Flywheel","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[5,6],"name":"Flywheel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}